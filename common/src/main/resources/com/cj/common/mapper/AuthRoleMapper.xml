<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cj.common.mapper.AuthRoleMapper" >
  <resultMap id="BaseResultMap" type="com.cj.core.entity.AuthRole" >
    <id column="role_id" property="roleId" jdbcType="BIGINT" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="role_grade" property="roleGrade" jdbcType="VARCHAR" />
    <result column="role_state" property="roleState" jdbcType="CHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    role_id, role_name, role_grade, role_state
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from auth_role
    where role_id = #{roleId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from auth_role
    where role_id = #{roleId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.cj.core.entity.AuthRole" >
    insert into auth_role (role_id, role_name, role_grade,
      role_state)
    values (#{roleId,jdbcType=BIGINT}, #{roleName,jdbcType=VARCHAR}, #{roleGrade,jdbcType=VARCHAR},
      #{roleState,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.cj.core.entity.AuthRole" >
    insert into auth_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="roleName != null" >
        role_name,
      </if>
      <if test="roleGrade != null" >
        role_grade,
      </if>
      <if test="roleState != null" >
        role_state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        #{roleId,jdbcType=BIGINT},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleGrade != null" >
        #{roleGrade,jdbcType=VARCHAR},
      </if>
      <if test="roleState != null" >
        #{roleState,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cj.core.entity.AuthRole" >
    update auth_role
    <set >
      <if test="roleName != null" >
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleGrade != null" >
        role_grade = #{roleGrade,jdbcType=VARCHAR},
      </if>
      <if test="roleState != null" >
        role_state = #{roleState,jdbcType=CHAR},
      </if>
    </set>
    where role_id = #{roleId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cj.core.entity.AuthRole" >
    update auth_role
    set role_name = #{roleName,jdbcType=VARCHAR},
      role_grade = #{roleGrade,jdbcType=VARCHAR},
      role_state = #{roleState,jdbcType=CHAR}
    where role_id = #{roleId,jdbcType=BIGINT}
  </update>


  <!--//根据用户ID查询账号角色信息-->
  <select id="findCustomerRoleById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    SELECT
    ar.role_id, ar.role_name, ar.role_grade, ar.role_state
    FROM
    auth_customer_role acr
    LEFT JOIN auth_role ar ON ar.role_id = acr.role_id
    WHERE
    acr.customer_id = #{customerId}
    AND
    ar.role_state = '1'

  </select>

  <!--查询所有角色信息-->
  <select id="findAllAuthRole" resultMap="BaseResultMap">
    SELECT
    *
    FROM
    auth_role ar
    ORDER BY ar.role_id ASC

  </select>

  <!--根据角色名称查询角色信息-->
  <select id="findAuthRoleByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT
    *
    FROM
    auth_role ar
    WHERE
    ar.role_name = #{roleName}
  </select>

  <!--根据账号等级和角色名称 查询角色id-->
  <select id="findRoleIdByName" resultType="java.lang.Long">
    select role_id from auth_role
    where role_name = #{roleName}

    limit 1
  </select>

  <update id="updateRoleIdByConsumerId">
    UPDATE
    auth_customer_role
    SET role_id = #{roleId}
    WHERE
    customer_id = #{consumerId}

  </update>

</mapper>